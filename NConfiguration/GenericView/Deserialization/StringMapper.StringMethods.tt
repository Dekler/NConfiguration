<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<# string[] types = new []{
	"Boolean",
	"Byte",
	"SByte",
	"Char",
	"Int16",
	"Int32",
	"Int64",
	"UInt16",
	"UInt32",
	"UInt64",
	"Single",
	"Double",
	"TimeSpan",
	"DateTime",
	"Guid"
};#>
using System;
using System.Collections.Generic;
using System.Globalization;

namespace NConfiguration.GenericView.Deserialization
{
	public partial class StringMapper
	{
		private object CreateConverterFromString(Type type)
		{
			if(type == typeof(string))
				return (Func<string, string>)ToString;
			else if(type == typeof(byte[]))
				return (Func<string, byte[]>)ToByteArray;
<#foreach(var type in types){#>
			else if(type == typeof(<#= type#>))
				return (Func<string, <#= type#>>)To<#= type#>;
			else if(type == typeof(<#= type#>?))
				return (Func<string, <#= type#>?>)ToN<#= type#>;
<#}#>
			
			return DefaultConverter(type);
		}
<#foreach(var type in types){#>
		
		/// <summary>
		/// Convert text to Nullable[<#= type#>]
		/// </summary>
		/// <param name="text">A string that represents the <#= type#> to convert.</param>
		/// <returns>A <#= type#> equivalent to the specified in text or null-value if argument not contain a text</returns>
		public <#= type#>? ToN<#= type#>(string text)
		{
			if (string.IsNullOrWhiteSpace(text))
				return null;

			return To<#= type#>(text);
		}
<#}#>
	}
}

